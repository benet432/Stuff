import java.io.IOException;
import java.util.*;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapred.*;
import org.apache.hadoop.util.*;

public class HW2 {

	public static class Map extends MapReduceBase implements
			Mapper<LongWritable, Text, Text, IntWritable> {
		private final static IntWritable one = new IntWritable(1);
		private Text range = new Text();

		public void map(LongWritable key, Text value,
				OutputCollector<Text, IntWritable> output, Reporter reporter)
				throws IOException {
			String x = "";
			String y = "";
			double xlo = 0;
			double xhi = 0;
			double ylo = 0;
			double yhi = 0;
			String line = value.toString();
			
			StringTokenizer tokenizer = new StringTokenizer(line);
			if (tokenizer.hasMoreTokens()) {
				x = tokenizer.nextToken();
				double x_value = Double.parseDouble(x);
				String xv = String.format("%.1f", x_value);
				double xval = Double.parseDouble(xv);
				if (x_value > xval - 0.1 && x_value <= xval) {
					xlo = xval - 0.1;
					xhi = xval;
				} else if (x_value > xval && x_value <= xval + 0.1) {
					xlo = xval;
					xhi = xval + 0.1;
				}
			}
			
			if (tokenizer.hasMoreTokens()) {
				y = tokenizer.nextToken();
				double y_value = Double.parseDouble(y);
				String yv = String.format("%.1f", y_value);
				double yval = Double.parseDouble(yv);
				if (y_value > yval - 0.1 && y_value <= yval) {
					ylo = yval - 0.1;
					yhi = yval;
				} else if (y_value > yval && y_value <= yval + 0.1) {
					ylo = yval;
					yhi = yval + 0.1;
				}
			}
			
			String x_lo = String.format("%.1f", xlo);
			String x_hi = String.format("%.1f", xhi);
			String y_lo = String.format("%.1f", ylo);
			String y_hi = String.format("%.1f", yhi);
			range.set(x_lo + "," + x_hi + "," + y_lo + "," + y_hi);
			output.collect(range, one);
		}
	}

	public static class Reduce extends MapReduceBase implements
			Reducer<Text, IntWritable, Text, IntWritable> {
		public void reduce(Text key, Iterator<IntWritable> values,
				OutputCollector<Text, IntWritable> output, Reporter reporter)
				throws IOException {
			int sum = 0;
			while (values.hasNext()) {
				sum += values.next().get();
			}
			output.collect(key, new IntWritable(sum));
		}
	}

	public static void main(String[] args) throws Exception {
		JobConf conf = new JobConf(HW2.class);
		conf.setJobName("hw2");

		conf.setOutputKeyClass(Text.class);
		conf.setOutputValueClass(IntWritable.class);

		conf.setMapperClass(Map.class);
		conf.setCombinerClass(Reduce.class);
		conf.setReducerClass(Reduce.class);

		conf.setInputFormat(TextInputFormat.class);
		conf.setOutputFormat(TextOutputFormat.class);

		FileInputFormat.setInputPaths(conf, new Path(args[0]));
		FileOutputFormat.setOutputPath(conf, new Path(args[1]));

		JobClient.runJob(conf);
	}
}
